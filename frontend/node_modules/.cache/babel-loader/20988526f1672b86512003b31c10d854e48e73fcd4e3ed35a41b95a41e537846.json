{"ast":null,"code":"export default {\n  props: {\n    role: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isLogin: true,\n      loading: false,\n      errorMessage: '',\n      formData: {\n        name: '',\n        username: '',\n        password: '',\n        // 用户注册字段\n        phone: '',\n        email: '',\n        address: '',\n        vehicles: [],\n        repairOrders: [],\n        // 管理员注册字段\n        role: '',\n        // 技师注册字段\n        employeeId: '',\n        skillType: '',\n        hourlyRate: ''\n      }\n    };\n  },\n  methods: {\n    toggleMode() {\n      this.isLogin = !this.isLogin;\n      this.errorMessage = '';\n      this.resetForm();\n    },\n    resetForm() {\n      this.formData = {\n        name: '',\n        username: '',\n        password: '',\n        phone: '',\n        email: '',\n        address: '',\n        vehicles: [],\n        repairOrders: [],\n        role: '',\n        employeeId: '',\n        skillType: '',\n        hourlyRate: ''\n      };\n    },\n    async submitForm() {\n      this.loading = true;\n      this.errorMessage = '';\n      try {\n        if (this.isLogin) {\n          await this.handleLogin();\n        } else {\n          await this.handleRegister();\n        }\n      } catch (error) {\n        console.error('认证失败:', error);\n        this.errorMessage = error.response?.data?.message || error.message || '网络连接错误';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleLogin() {\n      // 根据API文档，登录使用POST请求和查询参数\n      const apiPath = this.getApiPath();\n      const response = await this.$axios.post(`${apiPath}/login`, null, {\n        params: {\n          username: this.formData.username,\n          password: this.formData.password\n        }\n      });\n      if (response.data) {\n        // 存储用户信息到localStorage\n        localStorage.setItem('user', JSON.stringify(response.data));\n        localStorage.setItem('userRole', this.role);\n        this.$emit('auth-success', {\n          ...response.data,\n          role: this.role\n        });\n      }\n    },\n    async handleRegister() {\n      const apiPath = this.getApiPath();\n      const requestData = this.prepareRegisterData();\n      console.log('注册数据:', requestData); // 调试用\n\n      const response = await this.$axios.post(apiPath, requestData);\n      if (response.data) {\n        // 注册成功后自动登录\n        await this.handleLogin();\n      }\n    },\n    getApiPath() {\n      const roleMapping = {\n        'customer': '/users',\n        'admin': '/admins',\n        'technician': '/technicians'\n      };\n      return roleMapping[this.role];\n    },\n    prepareRegisterData() {\n      const baseData = {\n        username: this.formData.username,\n        password: this.formData.password\n      };\n      switch (this.role) {\n        case 'customer':\n          return {\n            ...baseData,\n            name: this.formData.name,\n            phone: this.formData.phone,\n            email: this.formData.email,\n            address: this.formData.address,\n            vehicles: [],\n            repairOrders: []\n          };\n        case 'admin':\n          return {\n            ...baseData,\n            role: this.formData.role\n          };\n        case 'technician':\n          return {\n            name: this.formData.name,\n            employeeId: this.formData.employeeId,\n            phone: this.formData.phone,\n            email: this.formData.email,\n            skillType: this.formData.skillType,\n            hourlyRate: parseFloat(this.formData.hourlyRate)\n          };\n        default:\n          return baseData;\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","role","type","String","required","data","isLogin","loading","errorMessage","formData","name","username","password","phone","email","address","vehicles","repairOrders","employeeId","skillType","hourlyRate","methods","toggleMode","resetForm","submitForm","handleLogin","handleRegister","error","console","response","message","apiPath","getApiPath","$axios","post","params","localStorage","setItem","JSON","stringify","$emit","requestData","prepareRegisterData","log","roleMapping","baseData","parseFloat"],"sources":["src/components/AuthForm.vue"],"sourcesContent":["<template>\n  <div class=\"auth-form\">\n    <h2>{{ isLogin ? '登录' : '注册' }}</h2>\n    <form @submit.prevent=\"submitForm\">\n      <div v-if=\"!isLogin\">\n        <input v-model=\"formData.name\" placeholder=\"姓名\" required>\n      </div>\n      <div v-if=\"!isLogin && role === 'customer'\">\n        <input v-model=\"formData.phone\" placeholder=\"电话号码\" required>\n        <input v-model=\"formData.email\" placeholder=\"邮箱\" type=\"email\" required>\n        <input v-model=\"formData.address\" placeholder=\"地址\" required>\n      </div>\n      <div v-if=\"!isLogin && role === 'admin'\">\n        <select v-model=\"formData.role\" required>\n          <option value=\"\">选择管理员角色</option>\n          <option value=\"SUPER_ADMIN\">超级管理员</option>\n          <option value=\"MANAGER\">经理</option>\n          <option value=\"STAFF\">员工</option>\n        </select>\n      </div>\n      <div v-if=\"!isLogin && role === 'technician'\">\n        <input v-model=\"formData.employeeId\" placeholder=\"员工ID\" required>\n        <input v-model=\"formData.phone\" placeholder=\"电话号码\" required>\n        <input v-model=\"formData.email\" placeholder=\"邮箱\" type=\"email\" required>\n        <select v-model=\"formData.skillType\" required>\n          <option value=\"\">选择技能类型</option>\n          <option value=\"MECHANIC\">机械维修</option>\n          <option value=\"ELECTRICIAN\">电气维修</option>\n          <option value=\"BODY_WORK\">车身维修</option>\n          <option value=\"PAINT\">喷漆</option>\n          <option value=\"DIAGNOSTIC\">诊断</option>\n        </select>\n        <input v-model=\"formData.hourlyRate\" placeholder=\"小时费率\" type=\"number\" step=\"0.01\" required>\n      </div>\n      <div>\n        <input v-model=\"formData.username\" placeholder=\"用户名\" required>\n      </div>\n      <div>\n        <input v-model=\"formData.password\" type=\"password\" placeholder=\"密码\" required>\n      </div>\n      <button type=\"submit\" :disabled=\"loading\">{{ loading ? '处理中...' : (isLogin ? '登录' : '注册') }}</button>\n    </form>\n    <p @click=\"toggleMode\" style=\"cursor: pointer; color: #42b983;\">{{ isLogin ? '没有账号？点击注册' : '已有账号？点击登录' }}</p>\n    <p v-if=\"errorMessage\" style=\"color: red;\">{{ errorMessage }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    role: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isLogin: true,\n      loading: false,\n      errorMessage: '',\n      formData: {\n        name: '',\n        username: '',\n        password: '',\n        // 用户注册字段\n        phone: '',\n        email: '',\n        address: '',\n        vehicles: [],\n        repairOrders: [],\n        // 管理员注册字段\n        role: '',\n        // 技师注册字段\n        employeeId: '',\n        skillType: '',\n        hourlyRate: ''\n      }\n    }\n  },\n  methods: {\n    toggleMode() {\n      this.isLogin = !this.isLogin;\n      this.errorMessage = '';\n      this.resetForm();\n    },\n    resetForm() {\n      this.formData = {\n        name: '',\n        username: '',\n        password: '',\n        phone: '',\n        email: '',\n        address: '',\n        vehicles: [],\n        repairOrders: [],\n        role: '',\n        employeeId: '',\n        skillType: '',\n        hourlyRate: ''\n      };\n    },\n    async submitForm() {\n      this.loading = true;\n      this.errorMessage = '';\n      \n      try {\n        if (this.isLogin) {\n          await this.handleLogin();\n        } else {\n          await this.handleRegister();\n        }\n      } catch (error) {\n        console.error('认证失败:', error);\n        this.errorMessage = error.response?.data?.message || error.message || '网络连接错误';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleLogin() {\n      // 根据API文档，登录使用POST请求和查询参数\n      const apiPath = this.getApiPath();\n      const response = await this.$axios.post(`${apiPath}/login`, null, {\n        params: {\n          username: this.formData.username,\n          password: this.formData.password\n        }\n      });\n      \n      if (response.data) {\n        // 存储用户信息到localStorage\n        localStorage.setItem('user', JSON.stringify(response.data));\n        localStorage.setItem('userRole', this.role);\n        this.$emit('auth-success', { ...response.data, role: this.role });\n      }\n    },\n    async handleRegister() {\n      const apiPath = this.getApiPath();\n      const requestData = this.prepareRegisterData();\n      \n      console.log('注册数据:', requestData); // 调试用\n      \n      const response = await this.$axios.post(apiPath, requestData);\n      \n      if (response.data) {\n        // 注册成功后自动登录\n        await this.handleLogin();\n      }\n    },\n    getApiPath() {\n      const roleMapping = {\n        'customer': '/users',\n        'admin': '/admins',\n        'technician': '/technicians'\n      };\n      return roleMapping[this.role];\n    },\n    prepareRegisterData() {\n      const baseData = {\n        username: this.formData.username,\n        password: this.formData.password\n      };\n\n      switch (this.role) {\n        case 'customer':\n          return {\n            ...baseData,\n            name: this.formData.name,\n            phone: this.formData.phone,\n            email: this.formData.email,\n            address: this.formData.address,\n            vehicles: [],\n            repairOrders: []\n          };\n        case 'admin':\n          return {\n            ...baseData,\n            role: this.formData.role\n          };\n        case 'technician':\n          return {\n            name: this.formData.name,\n            employeeId: this.formData.employeeId,\n            phone: this.formData.phone,\n            email: this.formData.email,\n            skillType: this.formData.skillType,\n            hourlyRate: parseFloat(this.formData.hourlyRate)\n          };\n        default:\n          return baseData;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.auth-form {\n  max-width: 400px;\n  margin: 50px auto;\n  padding: 30px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\n.auth-form h2 {\n  text-align: center;\n  margin-bottom: 20px;\n  color: #333;\n}\n\n.auth-form div {\n  margin-bottom: 15px;\n}\n\n.auth-form input, .auth-form select {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 14px;\n  box-sizing: border-box;\n}\n\n.auth-form button {\n  width: 100%;\n  padding: 12px;\n  background-color: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.auth-form button:hover:not(:disabled) {\n  background-color: #369970;\n}\n\n.auth-form button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n.auth-form p {\n  text-align: center;\n  margin-top: 15px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}